import * as fs from "@std/fs";
import { dirname, resolve as resolvePath } from "@std/path";

const json = JSON.stringify;

const UNIVERSE_NAME = "ATProtoUniverse";

if (!(await fs.exists("./atproto"))) {
  // TODO: git clone maybe?
  throw new Error("atproto directory was not cloned into the codegen dir! can't generate");
}

const lexiconDir = resolvePath("./atproto", "lexicons");
const modules = new Set<{ path: string; id: string; }>();

for await (const entry of fs.expandGlob(lexiconDir + "/**/*.json")) {
  const lexiconPath = entry.path.substring(lexiconDir.length + 1);
  const lexiconJson = JSON.parse(await Deno.readTextFile(entry.path));
  
  if (!("id" in lexiconJson)) continue;
  const id = lexiconJson["id"] as string;

  const path = lexiconPath.replace(/.json$/, ".ts");

  const outputPath = "../atproto-lexica/" + path;
  await fs.ensureDir(dirname(outputPath));
  await Deno.writeTextFile(outputPath, `// generated by lexicon.ts/codegen
const LexiconDefinition = ${json(lexiconJson, undefined, 2)} as const;
type LexiconType = typeof LexiconDefinition;
export { LexiconDefinition as "$ Definition" };
export type { LexiconType as "$ Type" };
`
  );

  console.log("[+]", id);
  modules.add({ path, id });
}

await Deno.writeTextFile("../atproto-lexica/mod.ts", `// generated by lexicon.ts/codegen
import { MakeLexiconUniverse } from "@char/lexicon.ts";

${[...modules]
  .map(mod => `import { "$ Type" as ${mod.id.replaceAll(".", "_")} } from ${json("./" + mod.path)};`)
  .join("\n")}

export type ${UNIVERSE_NAME} = MakeLexiconUniverse<[${[...modules]
  .map(mod => `${mod.id.replaceAll(".", "_")}`)
  .join(", ")}]>;
`);
